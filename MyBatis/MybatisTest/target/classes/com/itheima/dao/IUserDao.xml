<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.itheima.dao.IUserDao">

    <cache/>
   <!-- &lt;!&ndash; 定义User的resultMap&ndash;&gt;
    <resultMap id="userMap" type="myuser">
        <id property="id" column="id"></id>
        <result property="username" column="username"></result>
        <result property="address" column="address"></result>
        <result property="sex" column="sex"></result>

        &lt;!&ndash; 配置user对象中accounts集合的映射 &ndash;&gt;
        <collection property="accounts" ofType="account" column="id" select="com.itheima.dao.IAccountDao.findAccountByUid" ></collection>
    </resultMap>-->
    <select id="findAll" resultType="myuser">
        select * from myuser

    </select>

    <!-- 根据id查询用户 -->
    <select id="findById" parameterType="INT" resultType="myuser" useCache="true">
        select * from myuser where id = #{id}
    </select>
    <!-- 更新用户信息-->
    <update id="updateUser" parameterType="myuser">
        update myuser set username=#{username},address=#{address} where id=#{id}
    </update>
</mapper>
       <!-- &lt;!&ndash; 配置角色集合的映射 &ndash;&gt;
        <collection property="roles" ofType="role">
           &lt;!&ndash; <id property="roleid" column="rid"></id>
            <result property="rolename" column="rolename"></result>
            <result property="roledesc" column="roledesc"></result>&ndash;&gt;
        </collection>
    </resultMap>-->

    <!-- 查询所有
    select u.*,r.roleid as rid,r.rolename,r.roledesc from myuser u
         left outer join user_role ur  on u.id = ur.userid
         left outer join role r on r.roleid = ur.roleid
    -->


    <!--&lt;!&ndash; 定义User的resultMap&ndash;&gt;
    <resultMap id="userAccountMap" type="myuser">
        <id property="id" column="id"></id>
        <result property="username" column="username"></result>
        <result property="address" column="address"></result>
        <result property="sex" column="sex"></result>

        &lt;!&ndash; 配置user对象中accounts集合的映射 &ndash;&gt;
        <collection property="accounts" ofType="account">
            <id column="aid" property="id"></id>
            <result column="userid" property="userid"></result>
            <result column="money" property="money"></result>
        </collection>
    </resultMap>

    &lt;!&ndash; 查询所有 &ndash;&gt;
    <select id="findAll" resultMap="userAccountMap">
        select * from myuser u left outer join account a on u.id = a.userid
    </select>-->


    <!--&lt;!&ndash; 查询所有用户 &ndash;&gt;
    <select id="findAll" resultType="com.itheima.domain.Myuser">
        select * from myuser
    </select>-->
    <!--保存用户-->
   <!-- <insert id="saveUser" parameterType="com.itheima.domain.Myuser">
         insert into myuser(id,username,address,sex)values(#{id},#{username},#{address},#{sex})
    </insert>
    &lt;!&ndash;修改用户&ndash;&gt;
    <update id="updateUser" parameterType="com.itheima.domain.Myuser">
        update myuser set id=#{id},username=#{username},address=#{address},sex=#{sex} where id=#{id}
    </update>
    &lt;!&ndash;根据id删除用户&ndash;&gt;
    <delete id="deleteUser" parameterType="int">
        delete from myuser where id=#{id}
    </delete>-->



    <!-- 根据名称模糊查询
      /*      select * from myuser where username like #{name}*/
       @Test
    public void testFindByName(){
        //5.执行查询一个方法
      //  List<Myuser> users = userDao.findByName("%q%");
      List<Myuser> users = userDao.findByName("q");
        for(Myuser user : users){
            System.out.println(user);
        }
    }
    -->
   <!-- <select id="findByName" parameterType="string" resultType="com.itheima.domain.Myuser">
         select * from myuser where username like '%${value}%'
    </select>
    &lt;!&ndash; 获取用户的总记录条数 &ndash;&gt;
    <select id="findTotal" resultType="int">
        select count(id) from myuser
    </select>
    &lt;!&ndash; 根据id查询用户信息&ndash;&gt;
    <select id="findById" parameterType="int" resultType="com.itheima.domain.Myuser">

        select * from myuser where id=#{id}
    </select>-->

    <!-- 根据条件查询-->
   <!--<select id="findUserByCondition" resultType="com.itheima.domain.Myuser" parameterType="com.itheima.domain.Myuser">
       select * from myuser where 1=1
       <if test="username != null">
         and username = #{username}
       </if>
       <if test="sex != null">
           and sex = #{sex}
       </if>
   </select>-->
   <!-- <select id="findUserByCondition" resultType="com.itheima.domain.Myuser" parameterType="com.itheima.domain.Myuser">
    select * from myuser
    <where>
        <if test="username != null">
            and username = #{username}
        </if>
        <if test="sex != null">
            and sex = #{sex}
        </if>
    </where>
</select>-->

    <!-- 根据queryvo中的Id集合实现查询用户列表
       <include refid="defaultUser"></include>
       实体类加入：  private List<Integer> ids;（getter and setter）
       dao加入： List<Myuser> findUserInIds(QueryVo vo);
       Test: public void testFindInIds(){
        QueryVo vo = new QueryVo();
        List<Integer> list = new ArrayList<Integer>();
        list.add(1);
        //list.add(3);
        //list.add(46);
        vo.setIds(list);
        //5.执行查询所有方法
        List<Myuser> users = userDao.findUserInIds(vo);
        for(Myuser user : users){
            System.out.println(user);
        }
    }

     -->
    <!-- 了解的内容：抽取重复的sql语句-->
    <!--<sql id="defaultUser">
        select * from myuser
    </sql>

    <select id="findUserInIds" resultType="com.itheima.domain.Myuser" parameterType="com.itheima.domain.QueryVo">
        <include refid="defaultUser"></include>
        <where>
            <if test="ids != null and ids.size()>0">
                <foreach collection="ids" open="and id in (" close=")" item="id" separator=",">
                    #{id}
                </foreach>
            </if>
        </where>
    </select>
-->
    <!-- 根据queryVo的条件查询用户
    domain:
    public class QueryVo {
    private Myuser user;
    public Myuser getUser() {
        return user;
    }
    public void setUser(Myuser user) {
        this.user = user;
    }
}
    Test:
     /**
     * 测试使用QueryVo作为查询条件
     */
    @Test
    public void testFindByVo(){
        QueryVo vo = new QueryVo();
        Myuser user = new Myuser();
        user.setUsername("%q%");
        vo.setUser(user);
        //5.执行查询一个方法
        List<Myuser> users = userDao.findUserByVo(vo);
        for(Myuser u : users){
            System.out.println(u);
        }
    }
    -->
   <!-- <select id="findUserByVo" parameterType="com.itheima.domain.QueryVo" resultType="com.itheima.domain.Myuser">
        select * from myuser where username like #{user.username}
    </select>
-->


